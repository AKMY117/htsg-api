"""
return Seat(x=x, y=y, z_ear=ear_cm)


def _ls_rs_span_warning(W: float) -> Optional[str]:
# With side walls at y=0 and y=W, span is W.
# Warn if <270 cm (recommended ≥300 cm)
if W < 270:
return f"WARNING: Ls↔Rs span {W:.0f} cm < 270 cm (rec ≥ 300 cm)"
return None


def _top_geometry_note(H: float, ear_cm: float) -> str:
dv = H - ear_cm
if dv <= 0:
return "Overheads not feasible: ear height ≥ ceiling height."
# Preferred elevation band center ~50°; r = dv / tan(50°)
r = dv / tan(radians(50.0))
return (
f"Overheads: ΔV={dv:.1f} cm; nominal α≈50°. Horizontal radius r≈{r:.1f} cm."
)


def build_card(room_cm: Tuple[float, float, float], layout: str, ear_cm: float, *, fru: bool, extra_notes: Optional[str]) -> str:
L, W, H = room_cm

# Dolby Reference seat
seat = _enforce_dolby_seat(L, W, ear_cm)

# Beginner Summary Card (Dolby Reference)
lines = []
lines.append("# Beginner Summary — Dolby Reference")
lines.append(f"A) Layout: {layout}")
lines.append(f"B) Seat x/L: {seat.x:.1f} / {L:.1f} → {seat.x / L:.2f}")
span_warn = _ls_rs_span_warning(W)
lines.append(f"C) Ls↔Rs span: {W:.0f} cm" + (f" — {span_warn}" if span_warn else ""))
lines.append(f"D) Floor↔Top: {_top_geometry_note(H, ear_cm)}")
lines.append("")
lines.append("(Sketches not generated by this minimal API. Your GPT will render them.)")

# FRU (Seat‑Adjust) Mini-Card
if fru:
# Slide seat within [0.55L … 0.70L]. We demo two presets: expand vs compress.
fru_expand_x = 0.55 * L
fru_compress_x = 0.65 * L
lines.append("")
lines.append("# FRU (Seat‑Adjust) Mini‑Card")
lines.append(f"• Expand preset: seat x={fru_expand_x:.1f} cm (wider surrounds/tops)")
lines.append(f"• Compress preset: seat x={fru_compress_x:.1f} cm (tighter imaging)")
lines.append("Grading: Dolby Reference = gold‑standard imaging; FRU = wider spread (Grade B at band edges).")

# Optional user notes
if extra_notes:
lines.append("")
lines.append("Notes:")
lines.append(f"- {extra_notes}")

# Choice prompt (persisted in your GPT flow)
lines.append("")
lines.append("Pick your final set: Dolby Reference or FRU (Seat‑Adjust).")

return "\n".join(lines)
